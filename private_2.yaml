swagger: '2.0'
info:
 version: "82.0.0"
 title: Oxygen CMS REST API
 description: |
  Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 termsOfService: https://coral-logs-prod.symphony-solutions.eu/_plugin/kibana/#/discover?_g=()
 license:
  name: GNU General Public License v2.0
  url: https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
servers:
  - url: /
schemes:
 - http
 - https
produces:
 - application/json
securityDefinitions:
 Bearer:
  description: |
   For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header.

   A valid JWT token is generated by the API and retourned as answer of a call to the route /login giving a valid user & password.

   The following syntax must be used in the 'Authorization' header :
       Bearer: xxxxxx.yyyyyyy.zzzzzz
  type: apiKey
  name: Authorization
  in: header
basePath: '/v1/api'
paths:
  /login:
    post:
      tags:
        - Authentication
      description: |
        Allow users to log in, and to receive a JWT
      parameters:
        -
          in: body
          name: body
          description: username/password
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: Login Success
          schema:
            $ref: '#/definitions/Token'
        '403':
          description:  >-
            If user is not found (bad credentials) OR if user can not login (a concierge of an unsctive client)
          schema:
            $ref: '#/definitions/Error'

  '/banner':
    post:
      tags:
      - Banner
      security:
        - Bearer: []
      summary: Add a new Banner
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Banner
        description: Banner object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Banner'
      responses:
        201:
          description: Banner has been created
          schema:
            $ref: '#/definitions/Banner'
    put:
      tags:
      - Banner
      security:
        - Bearer: []
      summary: Update an existing Banner
      operationId: update
      parameters:
      - in: entity
        name: Banner
        description: Banner object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Banner'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Banner'
        404:
          description: Banner not found
    get:
      tags:
      - Banner
      security:
        - Bearer: []
      summary: Retrieve all Banners
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Banner'
  /banner/{id}:
    get:
      tags:
      - Banner
      security:
        - Bearer: []
      summary: Searches Banner by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Banner for specified Id
          schema:
            $ref: '#/definitions/Banner'
        404:
          description: Banner not found
    delete:
      tags:
      - Banner
      security:
        - Bearer: []
      summary: Delete a Banner
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Banner deleted. Nothing to return
        404:
          description: Banner not found
  /app-update:
    post:
      tags:
      - AppUpdate
      security:
        - Bearer: []
      summary: Add a new AppUpdate
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: AppUpdate
        description: AppUpdate object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/AppUpdate'
      responses:
        201:
          description: AppUpdate has been created
          schema:
            $ref: '#/definitions/AppUpdate'
    put:
      tags:
      - AppUpdate
      security:
        - Bearer: []
      summary: Update an existing AppUpdate
      operationId: update
      parameters:
      - in: entity
        name: AppUpdate
        description: AppUpdate object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/AppUpdate'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/AppUpdate'
        404:
          description: AppUpdate not found
    get:
      tags:
      - AppUpdate
      security:
        - Bearer: []
      summary: Retrieve all AppUpdates
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/AppUpdate'
  /app-update/{id}:
    get:
      tags:
      - AppUpdate
      security:
        - Bearer: []
      summary: Searches AppUpdate by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: AppUpdate for specified Id
          schema:
            $ref: '#/definitions/AppUpdate'
        404:
          description: AppUpdate not found
    delete:
      tags:
      - AppUpdate
      security:
        - Bearer: []
      summary: Delete a AppUpdate
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: AppUpdate deleted. Nothing to return
        404:
          description: AppUpdate not found
  /bet-receipt-banner:
    post:
      tags:
      - BetReceiptBanner
      security:
        - Bearer: []
      summary: Add a new BetReceiptBanner
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: BetReceiptBanner
        description: BetReceiptBanner object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/BetReceiptBanner'
      responses:
        201:
          description: BetReceiptBanner has been created
          schema:
            $ref: '#/definitions/BetReceiptBanner'
    put:
      tags:
      - BetReceiptBanner
      security:
        - Bearer: []
      summary: Update an existing BetReceiptBanner
      operationId: update
      parameters:
      - in: entity
        name: BetReceiptBanner
        description: BetReceiptBanner object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/BetReceiptBanner'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/BetReceiptBanner'
        404:
          description: BetReceiptBanner not found
    get:
      tags:
      - BetReceiptBanner
      security:
        - Bearer: []
      summary: Retrieve all BetReceiptBanners
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/BetReceiptBanner'
  /bet-receipt-banner/{id}:
    get:
      tags:
      - BetReceiptBanner
      security:
        - Bearer: []
      summary: Searches BetReceiptBanner by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: BetReceiptBanner for specified Id
          schema:
            $ref: '#/definitions/BetReceiptBanner'
        404:
          description: BetReceiptBanner not found
    delete:
      tags:
      - BetReceiptBanner
      security:
        - Bearer: []
      summary: Delete a BetReceiptBanner
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: BetReceiptBanner deleted. Nothing to return
        404:
          description: BetReceiptBanner not found

  /bet-receipt-banner-tablet:
    post:
      tags:
      - BetReceiptBannerTablet
      security:
        - Bearer: []
      summary: Add a new BetReceiptBannerTablet
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: BetReceiptBannerTablet
        description: BetReceiptBannerTablet object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/BetReceiptBannerTablet'
      responses:
        201:
          description: BetReceiptBannerTablet has been created
          schema:
            $ref: '#/definitions/BetReceiptBannerTablet'
    put:
      tags:
      - BetReceiptBannerTablet
      security:
        - Bearer: []
      summary: Update an existing BetReceiptBannerTablet
      operationId: update
      parameters:
      - in: entity
        name: BetReceiptBannerTablet
        description: BetReceiptBannerTablet object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/BetReceiptBannerTablet'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/BetReceiptBannerTablet'
        404:
          description: BetReceiptBannerTablet not found
    get:
      tags:
      - BetReceiptBannerTablet
      security:
        - Bearer: []
      summary: Retrieve all BetReceiptBannerTablets
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/BetReceiptBannerTablet'
  /bet-receipt-banner-tablet/{id}:
    get:
      tags:
      - BetReceiptBannerTablet
      security:
        - Bearer: []
      summary: Searches BetReceiptBannerTablet by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: BetReceiptBannerTablet for specified Id
          schema:
            $ref: '#/definitions/BetReceiptBannerTablet'
        404:
          description: BetReceiptBannerTablet not found
    delete:
      tags:
      - BetReceiptBannerTablet
      security:
        - Bearer: []
      summary: Delete a BetReceiptBannerTablet
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: BetReceiptBannerTablet deleted. Nothing to return
        404:
          description: BetReceiptBannerTablet not found

  /bottom-menu:
    post:
      tags:
      - BottomMenu
      security:
        - Bearer: []
      summary: Add a new BottomMenu
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: BottomMenu
        description: BottomMenu object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/BottomMenu'
      responses:
        201:
          description: BottomMenu has been created
          schema:
            $ref: '#/definitions/BottomMenu'
    put:
      tags:
      - BottomMenu
      security:
        - Bearer: []
      summary: Update an existing BottomMenu
      operationId: update
      parameters:
      - in: entity
        name: BottomMenu
        description: BottomMenu object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/BottomMenu'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/BottomMenu'
        404:
          description: BottomMenu not found
    get:
      tags:
      - BottomMenu
      security:
        - Bearer: []
      summary: Retrieve all BottomMenus
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/BottomMenu'
  /bottom-menu/{id}:
    get:
      tags:
      - BottomMenu
      security:
        - Bearer: []
      summary: Searches BottomMenu by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: BottomMenu for specified Id
          schema:
            $ref: '#/definitions/BottomMenu'
        404:
          description: BottomMenu not found
    delete:
      tags:
      - BottomMenu
      security:
        - Bearer: []
      summary: Delete a BottomMenu
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: BottomMenu deleted. Nothing to return
        404:
          description: BottomMenu not found

  /brand:
    post:
      tags:
      - Brand
      security:
        - Bearer: []
      summary: Add a new Brand
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Brand
        description: Brand object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Brand'
      responses:
        201:
          description: Brand has been created
          schema:
            $ref: '#/definitions/Brand'
    put:
      tags:
      - Brand
      security:
        - Bearer: []
      summary: Update an existing Brand
      operationId: update
      parameters:
      - in: entity
        name: Brand
        description: Brand object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Brand'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Brand'
        404:
          description: Brand not found
    get:
      tags:
      - Brand
      security:
        - Bearer: []
      summary: Retrieve all Brands
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
  /brand/{id}:
    get:
      tags:
      - Brand
      security:
        - Bearer: []
      summary: Searches Brand by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Brand for specified Id
          schema:
            $ref: '#/definitions/Brand'
        404:
          description: Brand not found
    delete:
      tags:
      - Brand
      security:
        - Bearer: []
      summary: Delete a Brand
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Brand deleted. Nothing to return
        404:
          description: Brand not found

  /configuration:
    post:
      tags:
      - Config
      security:
        - Bearer: []
      summary: Add a new Config
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Config
        description: Config object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Config'
      responses:
        201:
          description: Config has been created
          schema:
            $ref: '#/definitions/Config'
    put:
      tags:
      - Config
      security:
        - Bearer: []
      summary: Update an existing Config
      operationId: update
      parameters:
      - in: entity
        name: Config
        description: Config object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Config'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Config'
        404:
          description: Config not found
    get:
      tags:
      - Config
      security:
        - Bearer: []
      summary: Retrieve all Configs
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Config'
  /configuration/{id}:
    get:
      tags:
      - Config
      security:
        - Bearer: []
      summary: Searches Config by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Config for specified Id
          schema:
            $ref: '#/definitions/Config'
        404:
          description: Config not found
    delete:
      tags:
      - Config
      security:
        - Bearer: []
      summary: Delete a Config
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Config deleted. Nothing to return
        404:
          description: Config not found

  /connect-menu:
    post:
      tags:
      - ConnectMenu
      security:
        - Bearer: []
      summary: Add a new ConnectMenu
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: ConnectMenu
        description: ConnectMenu object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/ConnectMenu'
      responses:
        201:
          description: ConnectMenu has been created
          schema:
            $ref: '#/definitions/ConnectMenu'
    put:
      tags:
      - ConnectMenu
      security:
        - Bearer: []
      summary: Update an existing ConnectMenu
      operationId: update
      parameters:
      - in: entity
        name: ConnectMenu
        description: ConnectMenu object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/ConnectMenu'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/ConnectMenu'
        404:
          description: ConnectMenu not found
    get:
      tags:
      - ConnectMenu
      security:
        - Bearer: []
      summary: Retrieve all ConnectMenus
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/ConnectMenu'
  /connect-menu/{id}:
    get:
      tags:
      - ConnectMenu
      security:
        - Bearer: []
      summary: Searches ConnectMenu by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: ConnectMenu for specified Id
          schema:
            $ref: '#/definitions/ConnectMenu'
        404:
          description: ConnectMenu not found
    delete:
      tags:
      - ConnectMenu
      security:
        - Bearer: []
      summary: Delete a ConnectMenu
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: ConnectMenu deleted. Nothing to return
        404:
          description: ConnectMenu not found

  /country:
    post:
      tags:
      - Country
      security:
        - Bearer: []
      summary: Add a new Country
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Country
        description: Country object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Country'
      responses:
        201:
          description: Country has been created
          schema:
            $ref: '#/definitions/Country'
    put:
      tags:
      - Country
      security:
        - Bearer: []
      summary: Update an existing Country
      operationId: update
      parameters:
      - in: entity
        name: Country
        description: Country object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Country'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Country'
        404:
          description: Country not found
    get:
      tags:
      - Country
      security:
        - Bearer: []
      summary: Retrieve all Countrys
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Country'
  /country/{id}:
    get:
      tags:
      - Country
      security:
        - Bearer: []
      summary: Searches Country by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Country for specified Id
          schema:
            $ref: '#/definitions/Country'
        404:
          description: Country not found
    delete:
      tags:
      - Country
      security:
        - Bearer: []
      summary: Delete a Country
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Country deleted. Nothing to return
        404:
          description: Country not found

  /dashboard:
    post:
      tags:
      - Dashboard
      security:
        - Bearer: []
      summary: Add a new Dashboard
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Dashboard
        description: Dashboard object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Dashboard'
      responses:
        201:
          description: Dashboard has been created
          schema:
            $ref: '#/definitions/Dashboard'
    put:
      tags:
      - Dashboard
      security:
        - Bearer: []
      summary: Update an existing Dashboard
      operationId: update
      parameters:
      - in: entity
        name: Dashboard
        description: Dashboard object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Dashboard'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Dashboard'
        404:
          description: Dashboard not found
    get:
      tags:
      - Dashboard
      security:
        - Bearer: []
      summary: Retrieve all Dashboards
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Dashboard'
  /dashboard/{id}:
    get:
      tags:
      - Dashboard
      security:
        - Bearer: []
      summary: Searches Dashboard by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Dashboard for specified Id
          schema:
            $ref: '#/definitions/Dashboard'
        404:
          description: Dashboard not found
    delete:
      tags:
      - Dashboard
      security:
        - Bearer: []
      summary: Delete a Dashboard
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Dashboard deleted. Nothing to return
        404:
          description: Dashboard not found

  /edp-market:
    post:
      tags:
      - EdpMarket
      security:
        - Bearer: []
      summary: Add a new EdpMarket
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: EdpMarket
        description: EdpMarket object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/EdpMarket'
      responses:
        201:
          description: EdpMarket has been created
          schema:
            $ref: '#/definitions/EdpMarket'
    put:
      tags:
      - EdpMarket
      security:
        - Bearer: []
      summary: Update an existing EdpMarket
      operationId: update
      parameters:
      - in: entity
        name: EdpMarket
        description: EdpMarket object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/EdpMarket'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/EdpMarket'
        404:
          description: EdpMarket not found
    get:
      tags:
      - EdpMarket
      security:
        - Bearer: []
      summary: Retrieve all EdpMarkets
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/EdpMarket'
  /edp-market/{id}:
    get:
      tags:
      - EdpMarket
      security:
        - Bearer: []
      summary: Searches EdpMarket by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: EdpMarket for specified Id
          schema:
            $ref: '#/definitions/EdpMarket'
        404:
          description: EdpMarket not found
    delete:
      tags:
      - EdpMarket
      security:
        - Bearer: []
      summary: Delete a EdpMarket
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: EdpMarket deleted. Nothing to return
        404:
          description: EdpMarket not found

  /featured-events-type:
    post:
      tags:
      - FeaturedEventsType
      security:
        - Bearer: []
      summary: Add a new FeaturedEventsType
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: FeaturedEventsType
        description: FeaturedEventsType object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/FeaturedEventsType'
      responses:
        201:
          description: FeaturedEventsType has been created
          schema:
            $ref: '#/definitions/FeaturedEventsType'
    put:
      tags:
      - FeaturedEventsType
      security:
        - Bearer: []
      summary: Update an existing FeaturedEventsType
      operationId: update
      parameters:
      - in: entity
        name: FeaturedEventsType
        description: FeaturedEventsType object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/FeaturedEventsType'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/FeaturedEventsType'
        404:
          description: FeaturedEventsType not found
    get:
      tags:
      - FeaturedEventsType
      security:
        - Bearer: []
      summary: Retrieve all FeaturedEventsTypes
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/FeaturedEventsType'
  /featured-events-type/{id}:
    get:
      tags:
      - FeaturedEventsType
      security:
        - Bearer: []
      summary: Searches FeaturedEventsType by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: FeaturedEventsType for specified Id
          schema:
            $ref: '#/definitions/FeaturedEventsType'
        404:
          description: FeaturedEventsType not found
    delete:
      tags:
      - FeaturedEventsType
      security:
        - Bearer: []
      summary: Delete a FeaturedEventsType
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: FeaturedEventsType deleted. Nothing to return
        404:
          description: FeaturedEventsType not found

  /feature:
    post:
      tags:
      - Feature
      security:
        - Bearer: []
      summary: Add a new Feature
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Feature
        description: Feature object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Feature'
      responses:
        201:
          description: Feature has been created
          schema:
            $ref: '#/definitions/Feature'
    put:
      tags:
      - Feature
      security:
        - Bearer: []
      summary: Update an existing Feature
      operationId: update
      parameters:
      - in: entity
        name: Feature
        description: Feature object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Feature'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Feature'
        404:
          description: Feature not found
    get:
      tags:
      - Feature
      security:
        - Bearer: []
      summary: Retrieve all Features
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Feature'
  /feature/{id}:
    get:
      tags:
      - Feature
      security:
        - Bearer: []
      summary: Searches Feature by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Feature for specified Id
          schema:
            $ref: '#/definitions/Feature'
        404:
          description: Feature not found
    delete:
      tags:
      - Feature
      security:
        - Bearer: []
      summary: Delete a Feature
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Feature deleted. Nothing to return
        404:
          description: Feature not found

  /football-3d-banner:
    post:
      tags:
      - Football3DBanner
      security:
        - Bearer: []
      summary: Add a new Football3DBanner
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Football3DBanner
        description: Football3DBanner object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Football3DBanner'
      responses:
        201:
          description: Football3DBanner has been created
          schema:
            $ref: '#/definitions/Football3DBanner'
    put:
      tags:
      - Football3DBanner
      security:
        - Bearer: []
      summary: Update an existing Football3DBanner
      operationId: update
      parameters:
      - in: entity
        name: Football3DBanner
        description: Football3DBanner object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Football3DBanner'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Football3DBanner'
        404:
          description: Football3DBanner not found
    get:
      tags:
      - Football3DBanner
      security:
        - Bearer: []
      summary: Retrieve all Football3DBanners
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Football3DBanner'
  /football-3d-banner/{id}:
    get:
      tags:
      - Football3DBanner
      security:
        - Bearer: []
      summary: Searches Football3DBanner by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Football3DBanner for specified Id
          schema:
            $ref: '#/definitions/Football3DBanner'
        404:
          description: Football3DBanner not found
    delete:
      tags:
      - Football3DBanner
      security:
        - Bearer: []
      summary: Delete a Football3DBanner
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Football3DBanner deleted. Nothing to return
        404:
          description: Football3DBanner not found

  /footer-logo:
    post:
      tags:
      - FooterLogo
      security:
        - Bearer: []
      summary: Add a new FooterLogo
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: FooterLogo
        description: FooterLogo object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/FooterLogo'
      responses:
        201:
          description: FooterLogo has been created
          schema:
            $ref: '#/definitions/FooterLogo'
    put:
      tags:
      - FooterLogo
      security:
        - Bearer: []
      summary: Update an existing FooterLogo
      operationId: update
      parameters:
      - in: entity
        name: FooterLogo
        description: FooterLogo object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/FooterLogo'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/FooterLogo'
        404:
          description: FooterLogo not found
    get:
      tags:
      - FooterLogo
      security:
        - Bearer: []
      summary: Retrieve all FooterLogos
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/FooterLogo'
  /footer-logo/{id}:
    get:
      tags:
      - FooterLogo
      security:
        - Bearer: []
      summary: Searches FooterLogo by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: FooterLogo for specified Id
          schema:
            $ref: '#/definitions/FooterLogo'
        404:
          description: FooterLogo not found
    delete:
      tags:
      - FooterLogo
      security:
        - Bearer: []
      summary: Delete a FooterLogo
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: FooterLogo deleted. Nothing to return
        404:
          description: FooterLogo not found

  /footer-menu:
    post:
      tags:
      - FooterMenu
      security:
        - Bearer: []
      summary: Add a new FooterMenu
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: FooterMenu
        description: FooterMenu object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/FooterMenu'
      responses:
        201:
          description: FooterMenu has been created
          schema:
            $ref: '#/definitions/FooterMenu'
    put:
      tags:
      - FooterMenu
      security:
        - Bearer: []
      summary: Update an existing FooterMenu
      operationId: update
      parameters:
      - in: entity
        name: FooterMenu
        description: FooterMenu object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/FooterMenu'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/FooterMenu'
        404:
          description: FooterMenu not found
    get:
      tags:
      - FooterMenu
      security:
        - Bearer: []
      summary: Retrieve all FooterMenus
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/FooterMenu'
  /footer-menu/{id}:
    get:
      tags:
      - FooterMenu
      security:
        - Bearer: []
      summary: Searches FooterMenu by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: FooterMenu for specified Id
          schema:
            $ref: '#/definitions/FooterMenu'
        404:
          description: FooterMenu not found
    delete:
      tags:
      - FooterMenu
      security:
        - Bearer: []
      summary: Delete a FooterMenu
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: FooterMenu deleted. Nothing to return
        404:
          description: FooterMenu not found

  /gallery:
    post:
      tags:
      - Gallery
      security:
        - Bearer: []
      summary: Add a new Gallery
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Gallery
        description: Gallery object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Gallery'
      responses:
        201:
          description: Gallery has been created
          schema:
            $ref: '#/definitions/Gallery'
    put:
      tags:
      - Gallery
      security:
        - Bearer: []
      summary: Update an existing Gallery
      operationId: update
      parameters:
      - in: entity
        name: Gallery
        description: Gallery object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Gallery'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Gallery'
        404:
          description: Gallery not found
    get:
      tags:
      - Gallery
      security:
        - Bearer: []
      summary: Retrieve all Gallerys
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Gallery'
  /gallery/{id}:
    get:
      tags:
      - Gallery
      security:
        - Bearer: []
      summary: Searches Gallery by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Gallery for specified Id
          schema:
            $ref: '#/definitions/Gallery'
        404:
          description: Gallery not found
    delete:
      tags:
      - Gallery
      security:
        - Bearer: []
      summary: Delete a Gallery
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Gallery deleted. Nothing to return
        404:
          description: Gallery not found

  /header-menu:
    post:
      tags:
      - HeaderMenu
      security:
        - Bearer: []
      summary: Add a new HeaderMenu
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: HeaderMenu
        description: HeaderMenu object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/HeaderMenu'
      responses:
        201:
          description: HeaderMenu has been created
          schema:
            $ref: '#/definitions/HeaderMenu'
    put:
      tags:
      - HeaderMenu
      security:
        - Bearer: []
      summary: Update an existing HeaderMenu
      operationId: update
      parameters:
      - in: entity
        name: HeaderMenu
        description: HeaderMenu object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/HeaderMenu'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/HeaderMenu'
        404:
          description: HeaderMenu not found
    get:
      tags:
      - HeaderMenu
      security:
        - Bearer: []
      summary: Retrieve all HeaderMenus
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/HeaderMenu'
  /header-menu/{id}:
    get:
      tags:
      - HeaderMenu
      security:
        - Bearer: []
      summary: Searches HeaderMenu by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: HeaderMenu for specified Id
          schema:
            $ref: '#/definitions/HeaderMenu'
        404:
          description: HeaderMenu not found
    delete:
      tags:
      - HeaderMenu
      security:
        - Bearer: []
      summary: Delete a HeaderMenu
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: HeaderMenu deleted. Nothing to return
        404:
          description: HeaderMenu not found

  /home-module:
    post:
      tags:
      - HomeModule
      security:
        - Bearer: []
      summary: Add a new HomeModule
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: HomeModule
        description: HomeModule object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/HomeModule'
      responses:
        201:
          description: HomeModule has been created
          schema:
            $ref: '#/definitions/HomeModule'
    patch:
      tags:
      - HomeModule
      security:
        - Bearer: []
      summary: Update an existing HomeModule
      operationId: update
      parameters:
      - in: entity
        name: HomeModule
        description: HomeModule object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/HomeModule'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/HomeModule'
        404:
          description: HomeModule not found
    get:
      tags:
      - HomeModule
      security:
        - Bearer: []
      summary: Retrieve active/inactive HomeModules
      operationId: findAll
      produces:
      - application/json
      parameters:
      - name: "active"
        in: "query"
        required: false
        schema:
          type: string
          default: true
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/HomeModule'
  /home-module/{id}:
    get:
      tags:
      - HomeModule
      security:
        - Bearer: []
      summary: Searches HomeModule by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: HomeModule for specified Id
          schema:
            $ref: '#/definitions/HomeModule'
        404:
          description: HomeModule not found
    delete:
      tags:
      - HomeModule
      security:
        - Bearer: []
      summary: Delete a HomeModule
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: HomeModule deleted. Nothing to return
        404:
          description: HomeModule not found

  /hr-quick-link:
    post:
      tags:
      - HRQuickLink
      security:
        - Bearer: []
      summary: Add a new HRQuickLink
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: HRQuickLink
        description: HRQuickLink object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/HRQuickLink'
      responses:
        201:
          description: HRQuickLink has been created
          schema:
            $ref: '#/definitions/HRQuickLink'
    put:
      tags:
      - HRQuickLink
      security:
        - Bearer: []
      summary: Update an existing HRQuickLink
      operationId: update
      parameters:
      - in: entity
        name: HRQuickLink
        description: HRQuickLink object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/HRQuickLink'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/HRQuickLink'
        404:
          description: HRQuickLink not found
    get:
      tags:
      - HRQuickLink
      security:
        - Bearer: []
      summary: Retrieve all HRQuickLinks
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/HRQuickLink'
  /hr-quick-link/{id}:
    get:
      tags:
      - HRQuickLink
      security:
        - Bearer: []
      summary: Searches HRQuickLink by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: HRQuickLink for specified Id
          schema:
            $ref: '#/definitions/HRQuickLink'
        404:
          description: HRQuickLink not found
    delete:
      tags:
      - HRQuickLink
      security:
        - Bearer: []
      summary: Delete a HRQuickLink
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: HRQuickLink deleted. Nothing to return
        404:
          description: HRQuickLink not found

  /league:
    post:
      tags:
      - League
      security:
        - Bearer: []
      summary: Add a new League
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: League
        description: League object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/League'
      responses:
        201:
          description: League has been created
          schema:
            $ref: '#/definitions/League'
    put:
      tags:
      - League
      security:
        - Bearer: []
      summary: Update an existing League
      operationId: update
      parameters:
      - in: entity
        name: League
        description: League object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/League'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/League'
        404:
          description: League not found
    get:
      tags:
      - League
      security:
        - Bearer: []
      summary: Retrieve all Leagues
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/League'
  /league/{id}:
    get:
      tags:
      - League
      security:
        - Bearer: []
      summary: Searches League by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: League for specified Id
          schema:
            $ref: '#/definitions/League'
        404:
          description: League not found
    delete:
      tags:
      - League
      security:
        - Bearer: []
      summary: Delete a League
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: League deleted. Nothing to return
        404:
          description: League not found

  /left-menu:
    post:
      tags:
      - LeftMenu
      security:
        - Bearer: []
      summary: Add a new LeftMenu
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: LeftMenu
        description: LeftMenu object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/LeftMenu'
      responses:
        201:
          description: LeftMenu has been created
          schema:
            $ref: '#/definitions/LeftMenu'
    put:
      tags:
      - LeftMenu
      security:
        - Bearer: []
      summary: Update an existing LeftMenu
      operationId: update
      parameters:
      - in: entity
        name: LeftMenu
        description: LeftMenu object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/LeftMenu'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/LeftMenu'
        404:
          description: LeftMenu not found
    get:
      tags:
      - LeftMenu
      security:
        - Bearer: []
      summary: Retrieve all LeftMenus
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/LeftMenu'
  /left-menu/{id}:
    get:
      tags:
      - LeftMenu
      security:
        - Bearer: []
      summary: Searches LeftMenu by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: LeftMenu for specified Id
          schema:
            $ref: '#/definitions/LeftMenu'
        404:
          description: LeftMenu not found
    delete:
      tags:
      - LeftMenu
      security:
        - Bearer: []
      summary: Delete a LeftMenu
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: LeftMenu deleted. Nothing to return
        404:
          description: LeftMenu not found

  /ln-quick-link:
    post:
      tags:
      - LNQuickLink
      security:
        - Bearer: []
      summary: Add a new LNQuickLink
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: LNQuickLink
        description: LNQuickLink object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/LNQuickLink'
      responses:
        201:
          description: LNQuickLink has been created
          schema:
            $ref: '#/definitions/LNQuickLink'
    put:
      tags:
      - LNQuickLink
      security:
        - Bearer: []
      summary: Update an existing LNQuickLink
      operationId: update
      parameters:
      - in: entity
        name: LNQuickLink
        description: LNQuickLink object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/LNQuickLink'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/LNQuickLink'
        404:
          description: LNQuickLink not found
    get:
      tags:
      - LNQuickLink
      security:
        - Bearer: []
      summary: Retrieve all LNQuickLinks
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/LNQuickLink'
  /ln-quick-link/{id}:
    get:
      tags:
      - LNQuickLink
      security:
        - Bearer: []
      summary: Searches LNQuickLink by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: LNQuickLink for specified Id
          schema:
            $ref: '#/definitions/LNQuickLink'
        404:
          description: LNQuickLink not found
    delete:
      tags:
      - LNQuickLink
      security:
        - Bearer: []
      summary: Delete a LNQuickLink
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: LNQuickLink deleted. Nothing to return
        404:
          description: LNQuickLink not found

  /maintenance-page:
    post:
      tags:
      - MaintenancePage
      security:
        - Bearer: []
      summary: Add a new MaintenancePage
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: MaintenancePage
        description: MaintenancePage object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/MaintenancePage'
      responses:
        201:
          description: MaintenancePage has been created
          schema:
            $ref: '#/definitions/MaintenancePage'
    put:
      tags:
      - MaintenancePage
      security:
        - Bearer: []
      summary: Update an existing MaintenancePage
      operationId: update
      parameters:
      - in: entity
        name: MaintenancePage
        description: MaintenancePage object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/MaintenancePage'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/MaintenancePage'
        404:
          description: MaintenancePage not found
    get:
      tags:
      - MaintenancePage
      security:
        - Bearer: []
      summary: Retrieve all MaintenancePages
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/MaintenancePage'
  /maintenance-page/{id}:
    get:
      tags:
      - MaintenancePage
      security:
        - Bearer: []
      summary: Searches MaintenancePage by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: MaintenancePage for specified Id
          schema:
            $ref: '#/definitions/MaintenancePage'
        404:
          description: MaintenancePage not found
    delete:
      tags:
      - MaintenancePage
      security:
        - Bearer: []
      summary: Delete a MaintenancePage
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: MaintenancePage deleted. Nothing to return
        404:
          description: MaintenancePage not found

  /module-ribbon-tab:
    post:
      tags:
      - ModuleRibbonTab
      security:
        - Bearer: []
      summary: Add a new ModuleRibbonTab
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: ModuleRibbonTab
        description: ModuleRibbonTab object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/ModuleRibbonTab'
      responses:
        201:
          description: ModuleRibbonTab has been created
          schema:
            $ref: '#/definitions/ModuleRibbonTab'
    put:
      tags:
      - ModuleRibbonTab
      security:
        - Bearer: []
      summary: Update an existing ModuleRibbonTab
      operationId: update
      parameters:
      - in: entity
        name: ModuleRibbonTab
        description: ModuleRibbonTab object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/ModuleRibbonTab'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/ModuleRibbonTab'
        404:
          description: ModuleRibbonTab not found
    get:
      tags:
      - ModuleRibbonTab
      security:
        - Bearer: []
      summary: Retrieve all ModuleRibbonTabs
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/ModuleRibbonTab'
  /module-ribbon-tab/{id}:
    get:
      tags:
      - ModuleRibbonTab
      security:
        - Bearer: []
      summary: Searches ModuleRibbonTab by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: ModuleRibbonTab for specified Id
          schema:
            $ref: '#/definitions/ModuleRibbonTab'
        404:
          description: ModuleRibbonTab not found
    delete:
      tags:
      - ModuleRibbonTab
      security:
        - Bearer: []
      summary: Delete a ModuleRibbonTab
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: ModuleRibbonTab deleted. Nothing to return
        404:
          description: ModuleRibbonTab not found

  /offer-module:
    post:
      tags:
      - OfferModule
      security:
        - Bearer: []
      summary: Add a new OfferModule
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: OfferModule
        description: OfferModule object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/OfferModule'
      responses:
        201:
          description: OfferModule has been created
          schema:
            $ref: '#/definitions/OfferModule'
    put:
      tags:
      - OfferModule
      security:
        - Bearer: []
      summary: Update an existing OfferModule
      operationId: update
      parameters:
      - in: entity
        name: OfferModule
        description: OfferModule object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/OfferModule'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/OfferModule'
        404:
          description: OfferModule not found
    get:
      tags:
      - OfferModule
      security:
        - Bearer: []
      summary: Retrieve all OfferModules
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/OfferModule'
  /offer-module/{id}:
    get:
      tags:
      - OfferModule
      security:
        - Bearer: []
      summary: Searches OfferModule by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: OfferModule for specified Id
          schema:
            $ref: '#/definitions/OfferModule'
        404:
          description: OfferModule not found
    delete:
      tags:
      - OfferModule
      security:
        - Bearer: []
      summary: Delete a OfferModule
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: OfferModule deleted. Nothing to return
        404:
          description: OfferModule not found

  /offer:
    post:
      tags:
      - Offer
      security:
        - Bearer: []
      summary: Add a new Offer
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Offer
        description: Offer object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Offer'
      responses:
        201:
          description: Offer has been created
          schema:
            $ref: '#/definitions/Offer'
    put:
      tags:
      - Offer
      security:
        - Bearer: []
      summary: Update an existing Offer
      operationId: update
      parameters:
      - in: entity
        name: Offer
        description: Offer object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Offer'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Offer'
        404:
          description: Offer not found
    get:
      tags:
      - Offer
      security:
        - Bearer: []
      summary: Retrieve all Offers
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Offer'
  /offer/{id}:
    get:
      tags:
      - Offer
      security:
        - Bearer: []
      summary: Searches Offer by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Offer for specified Id
          schema:
            $ref: '#/definitions/Offer'
        404:
          description: Offer not found
    delete:
      tags:
      - Offer
      security:
        - Bearer: []
      summary: Delete a Offer
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Offer deleted. Nothing to return
        404:
          description: Offer not found

  /post:
    post:
      tags:
      - Post
      security:
        - Bearer: []
      summary: Add a new Post
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Post
        description: Post object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Post'
      responses:
        201:
          description: Post has been created
          schema:
            $ref: '#/definitions/Post'
    put:
      tags:
      - Post
      security:
        - Bearer: []
      summary: Update an existing Post
      operationId: update
      parameters:
      - in: entity
        name: Post
        description: Post object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Post'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Post'
        404:
          description: Post not found
    get:
      tags:
      - Post
      security:
        - Bearer: []
      summary: Retrieve all Posts
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
  /post/{id}:
    get:
      tags:
      - Post
      security:
        - Bearer: []
      summary: Searches Post by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Post for specified Id
          schema:
            $ref: '#/definitions/Post'
        404:
          description: Post not found
    delete:
      tags:
      - Post
      security:
        - Bearer: []
      summary: Delete a Post
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Post deleted. Nothing to return
        404:
          description: Post not found

  /promotion:
    post:
      tags:
      - Promotion
      security:
        - Bearer: []
      summary: Add a new Promotion
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Promotion
        description: Promotion object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Promotion'
      responses:
        201:
          description: Promotion has been created
          schema:
            $ref: '#/definitions/Promotion'
    put:
      tags:
      - Promotion
      security:
        - Bearer: []
      summary: Update an existing Promotion
      operationId: update
      parameters:
      - in: entity
        name: Promotion
        description: Promotion object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Promotion'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Promotion'
        404:
          description: Promotion not found
    get:
      tags:
      - Promotion
      security:
        - Bearer: []
      summary: Retrieve all Promotions
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Promotion'
  /promotion/{id}:
    get:
      tags:
      - Promotion
      security:
        - Bearer: []
      summary: Searches Promotion by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Promotion for specified Id
          schema:
            $ref: '#/definitions/Promotion'
        404:
          description: Promotion not found
    delete:
      tags:
      - Promotion
      security:
        - Bearer: []
      summary: Delete a Promotion
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Promotion deleted. Nothing to return
        404:
          description: Promotion not found

  /quick-link:
    post:
      tags:
      - QuickLink
      security:
        - Bearer: []
      summary: Add a new QuickLink
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: QuickLink
        description: QuickLink object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/QuickLink'
      responses:
        201:
          description: QuickLink has been created
          schema:
            $ref: '#/definitions/QuickLink'
    put:
      tags:
      - QuickLink
      security:
        - Bearer: []
      summary: Update an existing QuickLink
      operationId: update
      parameters:
      - in: entity
        name: QuickLink
        description: QuickLink object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/QuickLink'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/QuickLink'
        404:
          description: QuickLink not found
    get:
      tags:
      - QuickLink
      security:
        - Bearer: []
      summary: Retrieve all QuickLinks
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/QuickLink'
  /quick-link/{id}:
    get:
      tags:
      - QuickLink
      security:
        - Bearer: []
      summary: Searches QuickLink by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: QuickLink for specified Id
          schema:
            $ref: '#/definitions/QuickLink'
        404:
          description: QuickLink not found
    delete:
      tags:
      - QuickLink
      security:
        - Bearer: []
      summary: Delete a QuickLink
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: QuickLink deleted. Nothing to return
        404:
          description: QuickLink not found

  /right-menu:
    post:
      tags:
      - RightMenu
      security:
        - Bearer: []
      summary: Add a new RightMenu
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: RightMenu
        description: RightMenu object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/RightMenu'
      responses:
        201:
          description: RightMenu has been created
          schema:
            $ref: '#/definitions/RightMenu'
    put:
      tags:
      - RightMenu
      security:
        - Bearer: []
      summary: Update an existing RightMenu
      operationId: update
      parameters:
      - in: entity
        name: RightMenu
        description: RightMenu object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/RightMenu'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/RightMenu'
        404:
          description: RightMenu not found
    get:
      tags:
      - RightMenu
      security:
        - Bearer: []
      summary: Retrieve all RightMenus
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/RightMenu'
  /right-menu/{id}:
    get:
      tags:
      - RightMenu
      security:
        - Bearer: []
      summary: Searches RightMenu by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: RightMenu for specified Id
          schema:
            $ref: '#/definitions/RightMenu'
        404:
          description: RightMenu not found
    delete:
      tags:
      - RightMenu
      security:
        - Bearer: []
      summary: Delete a RightMenu
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: RightMenu deleted. Nothing to return
        404:
          description: RightMenu not found

  /seo-page:
    post:
      tags:
      - SeoPage
      security:
        - Bearer: []
      summary: Add a new SeoPage
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: SeoPage
        description: SeoPage object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/SeoPage'
      responses:
        201:
          description: SeoPage has been created
          schema:
            $ref: '#/definitions/SeoPage'
    put:
      tags:
      - SeoPage
      security:
        - Bearer: []
      summary: Update an existing SeoPage
      operationId: update
      parameters:
      - in: entity
        name: SeoPage
        description: SeoPage object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/SeoPage'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/SeoPage'
        404:
          description: SeoPage not found
    get:
      tags:
      - SeoPage
      security:
        - Bearer: []
      summary: Retrieve all SeoPages
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/SeoPage'
  /seo-page/{id}:
    get:
      tags:
      - SeoPage
      security:
        - Bearer: []
      summary: Searches SeoPage by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: SeoPage for specified Id
          schema:
            $ref: '#/definitions/SeoPage'
        404:
          description: SeoPage not found
    delete:
      tags:
      - SeoPage
      security:
        - Bearer: []
      summary: Delete a SeoPage
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: SeoPage deleted. Nothing to return
        404:
          description: SeoPage not found

  /sport-category:
    post:
      tags:
      - SportCategory
      security:
        - Bearer: []
      summary: Add a new SportCategory
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: SportCategory
        description: SportCategory object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/SportCategory'
      responses:
        201:
          description: SportCategory has been created
          schema:
            $ref: '#/definitions/SportCategory'
    put:
      tags:
      - SportCategory
      security:
        - Bearer: []
      summary: Update an existing SportCategory
      operationId: update
      parameters:
      - in: entity
        name: SportCategory
        description: SportCategory object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/SportCategory'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/SportCategory'
        404:
          description: SportCategory not found
    get:
      tags:
      - SportCategory
      security:
        - Bearer: []
      summary: Retrieve all SportCategorys
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/SportCategory'
  /sport-category/{id}:
    get:
      tags:
      - SportCategory
      security:
        - Bearer: []
      summary: Searches SportCategory by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: SportCategory for specified Id
          schema:
            $ref: '#/definitions/SportCategory'
        404:
          description: SportCategory not found
    delete:
      tags:
      - SportCategory
      security:
        - Bearer: []
      summary: Delete a SportCategory
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: SportCategory deleted. Nothing to return
        404:
          description: SportCategory not found

  /sport:
    post:
      tags:
      - Sport
      security:
        - Bearer: []
      summary: Add a new Sport
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Sport
        description: Sport object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Sport'
      responses:
        201:
          description: Sport has been created
          schema:
            $ref: '#/definitions/Sport'
    put:
      tags:
      - Sport
      security:
        - Bearer: []
      summary: Update an existing Sport
      operationId: update
      parameters:
      - in: entity
        name: Sport
        description: Sport object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Sport'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Sport'
        404:
          description: Sport not found
    get:
      tags:
      - Sport
      security:
        - Bearer: []
      summary: Retrieve all Sports
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Sport'
  /sport/{id}:
    get:
      tags:
      - Sport
      security:
        - Bearer: []
      summary: Searches Sport by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Sport for specified Id
          schema:
            $ref: '#/definitions/Sport'
        404:
          description: Sport not found
    delete:
      tags:
      - Sport
      security:
        - Bearer: []
      summary: Delete a Sport
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Sport deleted. Nothing to return
        404:
          description: Sport not found

  /sso-page:
    post:
      tags:
      - SsoPage
      security:
        - Bearer: []
      summary: Add a new SsoPage
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: SsoPage
        description: SsoPage object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/SsoPage'
      responses:
        201:
          description: SsoPage has been created
          schema:
            $ref: '#/definitions/SsoPage'
    put:
      tags:
      - SsoPage
      security:
        - Bearer: []
      summary: Update an existing SsoPage
      operationId: update
      parameters:
      - in: entity
        name: SsoPage
        description: SsoPage object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/SsoPage'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/SsoPage'
        404:
          description: SsoPage not found
    get:
      tags:
      - SsoPage
      security:
        - Bearer: []
      summary: Retrieve all SsoPages
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/SsoPage'
  /sso-page/{id}:
    get:
      tags:
      - SsoPage
      security:
        - Bearer: []
      summary: Searches SsoPage by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: SsoPage for specified Id
          schema:
            $ref: '#/definitions/SsoPage'
        404:
          description: SsoPage not found
    delete:
      tags:
      - SsoPage
      security:
        - Bearer: []
      summary: Delete a SsoPage
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: SsoPage deleted. Nothing to return
        404:
          description: SsoPage not found

  /static-block:
    post:
      tags:
      - StaticBlock
      security:
        - Bearer: []
      summary: Add a new StaticBlock
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: StaticBlock
        description: StaticBlock object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/StaticBlock'
      responses:
        201:
          description: StaticBlock has been created
          schema:
            $ref: '#/definitions/StaticBlock'
    put:
      tags:
      - StaticBlock
      security:
        - Bearer: []
      summary: Update an existing StaticBlock
      operationId: update
      parameters:
      - in: entity
        name: StaticBlock
        description: StaticBlock object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/StaticBlock'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/StaticBlock'
        404:
          description: StaticBlock not found
    get:
      tags:
      - StaticBlock
      security:
        - Bearer: []
      summary: Retrieve all StaticBlocks
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/StaticBlock'
  /static-block/{id}:
    get:
      tags:
      - StaticBlock
      security:
        - Bearer: []
      summary: Searches StaticBlock by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: StaticBlock for specified Id
          schema:
            $ref: '#/definitions/StaticBlock'
        404:
          description: StaticBlock not found
    delete:
      tags:
      - StaticBlock
      security:
        - Bearer: []
      summary: Delete a StaticBlock
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: StaticBlock deleted. Nothing to return
        404:
          description: StaticBlock not found

  /structure:
    post:
      tags:
      - Structure
      security:
        - Bearer: []
      summary: Add a new Structure
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Structure
        description: Structure object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Structure'
      responses:
        201:
          description: Structure has been created
          schema:
            $ref: '#/definitions/Structure'
    put:
      tags:
      - Structure
      security:
        - Bearer: []
      summary: Update an existing Structure
      operationId: update
      parameters:
      - in: entity
        name: Structure
        description: Structure object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Structure'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Structure'
        404:
          description: Structure not found
    get:
      tags:
      - Structure
      security:
        - Bearer: []
      summary: Retrieve all Structures
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Structure'
  /structure/{id}:
    get:
      tags:
      - Structure
      security:
        - Bearer: []
      summary: Searches Structure by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Structure for specified Id
          schema:
            $ref: '#/definitions/Structure'
        404:
          description: Structure not found
    delete:
      tags:
      - Structure
      security:
        - Bearer: []
      summary: Delete a Structure
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Structure deleted. Nothing to return
        404:
          description: Structure not found

  /top-game:
    post:
      tags:
      - TopGame
      security:
        - Bearer: []
      summary: Add a new TopGame
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: TopGame
        description: TopGame object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/TopGame'
      responses:
        201:
          description: TopGame has been created
          schema:
            $ref: '#/definitions/TopGame'
    put:
      tags:
      - TopGame
      security:
        - Bearer: []
      summary: Update an existing TopGame
      operationId: update
      parameters:
      - in: entity
        name: TopGame
        description: TopGame object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/TopGame'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/TopGame'
        404:
          description: TopGame not found
    get:
      tags:
      - TopGame
      security:
        - Bearer: []
      summary: Retrieve all TopGames
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/TopGame'
  /top-game/{id}:
    get:
      tags:
      - TopGame
      security:
        - Bearer: []
      summary: Searches TopGame by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: TopGame for specified Id
          schema:
            $ref: '#/definitions/TopGame'
        404:
          description: TopGame not found
    delete:
      tags:
      - TopGame
      security:
        - Bearer: []
      summary: Delete a TopGame
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: TopGame deleted. Nothing to return
        404:
          description: TopGame not found

  /top-menu:
    post:
      tags:
      - TopMenu
      security:
        - Bearer: []
      summary: Add a new TopMenu
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: TopMenu
        description: TopMenu object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/TopMenu'
      responses:
        201:
          description: TopMenu has been created
          schema:
            $ref: '#/definitions/TopMenu'
    put:
      tags:
      - TopMenu
      security:
        - Bearer: []
      summary: Update an existing TopMenu
      operationId: update
      parameters:
      - in: entity
        name: TopMenu
        description: TopMenu object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/TopMenu'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/TopMenu'
        404:
          description: TopMenu not found
    get:
      tags:
      - TopMenu
      security:
        - Bearer: []
      summary: Retrieve all TopMenus
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/TopMenu'
  /top-menu/{id}:
    get:
      tags:
      - TopMenu
      security:
        - Bearer: []
      summary: Searches TopMenu by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: TopMenu for specified Id
          schema:
            $ref: '#/definitions/TopMenu'
        404:
          description: TopMenu not found
    delete:
      tags:
      - TopMenu
      security:
        - Bearer: []
      summary: Delete a TopMenu
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: TopMenu deleted. Nothing to return
        404:
          description: TopMenu not found

  /user-menu:
    post:
      tags:
      - UserMenu
      security:
        - Bearer: []
      summary: Add a new UserMenu
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: UserMenu
        description: UserMenu object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/UserMenu'
      responses:
        201:
          description: UserMenu has been created
          schema:
            $ref: '#/definitions/UserMenu'
    put:
      tags:
      - UserMenu
      security:
        - Bearer: []
      summary: Update an existing UserMenu
      operationId: update
      parameters:
      - in: entity
        name: UserMenu
        description: UserMenu object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/UserMenu'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/UserMenu'
        404:
          description: UserMenu not found
    get:
      tags:
      - UserMenu
      security:
        - Bearer: []
      summary: Retrieve all UserMenus
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/UserMenu'
  /user-menu/{id}:
    get:
      tags:
      - UserMenu
      security:
        - Bearer: []
      summary: Searches UserMenu by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: UserMenu for specified Id
          schema:
            $ref: '#/definitions/UserMenu'
        404:
          description: UserMenu not found
    delete:
      tags:
      - UserMenu
      security:
        - Bearer: []
      summary: Delete a UserMenu
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: UserMenu deleted. Nothing to return
        404:
          description: UserMenu not found

  /user:
    post:
      tags:
      - User
      security:
        - Bearer: []
      summary: Add a new User
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: User
        description: User object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        201:
          description: User has been created
          schema:
            $ref: '#/definitions/User'
    put:
      tags:
      - User
      security:
        - Bearer: []
      summary: Update an existing User
      operationId: update
      parameters:
      - in: entity
        name: User
        description: User object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/User'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found
    get:
      tags:
      - User
      security:
        - Bearer: []
      summary: Retrieve all Users
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /user/{id}:
    get:
      tags:
      - User
      security:
        - Bearer: []
      summary: Searches User by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: User for specified Id
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found
    delete:
      tags:
      - User
      security:
        - Bearer: []
      summary: Delete a User
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: User deleted. Nothing to return
        404:
          description: User not found
    patch:
      summary: Partially updates user

  /widget:
    post:
      tags:
      - Widget
      security:
        - Bearer: []
      summary: Add a new Widget
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: Widget
        description: Widget object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/Widget'
      responses:
        201:
          description: Widget has been created
          schema:
            $ref: '#/definitions/Widget'
    put:
      tags:
      - Widget
      security:
        - Bearer: []
      summary: Update an existing Widget
      operationId: update
      parameters:
      - in: entity
        name: Widget
        description: Widget object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/Widget'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Widget'
        404:
          description: Widget not found
    get:
      tags:
      - Widget
      security:
        - Bearer: []
      summary: Retrieve all Widgets
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Widget'
  /widget/{id}:
    get:
      tags:
      - Widget
      security:
        - Bearer: []
      summary: Searches Widget by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: Widget for specified Id
          schema:
            $ref: '#/definitions/Widget'
        404:
          description: Widget not found
    delete:
      tags:
      - Widget
      security:
        - Bearer: []
      summary: Delete a Widget
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: Widget deleted. Nothing to return
        404:
          description: Widget not found

  /your-call-league:
    post:
      tags:
      - YourCallLeague
      security:
        - Bearer: []
      summary: Add a new YourCallLeague
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: YourCallLeague
        description: YourCallLeague object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/YourCallLeague'
      responses:
        201:
          description: YourCallLeague has been created
          schema:
            $ref: '#/definitions/YourCallLeague'
    put:
      tags:
      - YourCallLeague
      security:
        - Bearer: []
      summary: Update an existing YourCallLeague
      operationId: update
      parameters:
      - in: entity
        name: YourCallLeague
        description: YourCallLeague object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/YourCallLeague'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/YourCallLeague'
        404:
          description: YourCallLeague not found
    get:
      tags:
      - YourCallLeague
      security:
        - Bearer: []
      summary: Retrieve all YourCallLeagues
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/YourCallLeague'
  /your-call-league/{id}:
    get:
      tags:
      - YourCallLeague
      security:
        - Bearer: []
      summary: Searches YourCallLeague by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: YourCallLeague for specified Id
          schema:
            $ref: '#/definitions/YourCallLeague'
        404:
          description: YourCallLeague not found
    delete:
      tags:
      - YourCallLeague
      security:
        - Bearer: []
      summary: Delete a YourCallLeague
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: YourCallLeague deleted. Nothing to return
        404:
          description: YourCallLeague not found

  /your-call-market:
    post:
      tags:
      - YourCallMarket
      security:
        - Bearer: []
      summary: Add a new YourCallMarket
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: YourCallMarket
        description: YourCallMarket object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/YourCallMarket'
      responses:
        201:
          description: YourCallMarket has been created
          schema:
            $ref: '#/definitions/YourCallMarket'
    put:
      tags:
      - YourCallMarket
      security:
        - Bearer: []
      summary: Update an existing YourCallMarket
      operationId: update
      parameters:
      - in: entity
        name: YourCallMarket
        description: YourCallMarket object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/YourCallMarket'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/YourCallMarket'
        404:
          description: YourCallMarket not found
    get:
      tags:
      - YourCallMarket
      security:
        - Bearer: []
      summary: Retrieve all YourCallMarkets
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/YourCallMarket'
  /your-call-market/{id}:
    get:
      tags:
      - YourCallMarket
      security:
        - Bearer: []
      summary: Searches YourCallMarket by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: YourCallMarket for specified Id
          schema:
            $ref: '#/definitions/YourCallMarket'
        404:
          description: YourCallMarket not found
    delete:
      tags:
      - YourCallMarket
      security:
        - Bearer: []
      summary: Delete a YourCallMarket
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: YourCallMarket deleted. Nothing to return
        404:
          description: YourCallMarket not found

  /your-call-static-block:
    post:
      tags:
      - YourCallStaticBlock
      security:
        - Bearer: []
      summary: Add a new YourCallStaticBlock
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: entity
        name: YourCallStaticBlock
        description: YourCallStaticBlock object that needs to be added to the storage
        required: true
        schema:
          $ref: '#/definitions/YourCallStaticBlock'
      responses:
        201:
          description: YourCallStaticBlock has been created
          schema:
            $ref: '#/definitions/YourCallStaticBlock'
    put:
      tags:
      - YourCallStaticBlock
      security:
        - Bearer: []
      summary: Update an existing YourCallStaticBlock
      operationId: update
      parameters:
      - in: entity
        name: YourCallStaticBlock
        description: YourCallStaticBlock object that needs to be updated in the storage
        required: true
        schema:
          $ref: '#/definitions/YourCallStaticBlock'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/YourCallStaticBlock'
        404:
          description: YourCallStaticBlock not found
    get:
      tags:
      - YourCallStaticBlock
      security:
        - Bearer: []
      summary: Retrieve all YourCallStaticBlocks
      operationId: findAll
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/YourCallStaticBlock'
  /your-call-static-block/{id}:
    get:
      tags:
      - YourCallStaticBlock
      security:
        - Bearer: []
      summary: Searches YourCallStaticBlock by id
      operationId: findOne
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        200:
          description: YourCallStaticBlock for specified Id
          schema:
            $ref: '#/definitions/YourCallStaticBlock'
        404:
          description: YourCallStaticBlock not found
    delete:
      tags:
      - YourCallStaticBlock
      security:
        - Bearer: []
      summary: Delete a YourCallStaticBlock
      parameters:
      - name: id
        in: path
        required: true
        type: string
      responses:
        204:
          description: YourCallStaticBlock deleted. Nothing to return
        404:
          description: YourCallStaticBlock not found
definitions:
  Login:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
  Error:
    type: object
    properties:
     message:
      type: string
     error:
      type: string
  User:
    type: object
    properties:
      id:
        type: string
      isAdmin:
        type: boolean
      email:
        type: string
      password:
        type: string
      name:
        type: object
        properties:
          last:
            type: string
          first:
            type: string
  Filename:
    type: object
    properties:
      filename:
        type: "string"
      path:
        type: "string"
      size:
        type: "number"
      filetype:
        type: "string"
  SvgFilename:
    type: object
    properties:
      filename:
        type: "string"
      originalfilename:
        type: "string"
      path:
        type: "string"
      size:
        type: "number"
      filetype:
        type: "string"
  VipLevel:
    type: object
  Banner:
    type: object
    properties:
      id:
        type: string
      alt:
        type: string
      brand:
        type: string
      categoryId:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      desktopFilename:
        $ref: '#/definitions/Filename'
      desktopHeightMedium:
        type: string
      desktopTargetUri:
        type: string
      desktopUriMedium:
        type: string
      desktopUriSmall:
        type: string
      desktopWidthMedium:
        type: string
      disabled:
        type: boolean
      filename:
        $ref: '#/definitions/Filename'
      imageTitle:
        type: string
      imageTitle_brand:
        type: string
      inApp:
        type: boolean
      lang:
        type: string
      showToCustomer:
        type: string
      sortOrder:
        type: number
      targetUri:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: string
      uriMedium:
        type: string
      uriSmall:
        type: string
      validityPeriodEnd:
        type: string
      validityPeriodStart:
        type: string
      vipLevels:
        type: array
        items:
          $ref: '#/definitions/VipLevel'
      vipLevelsInput:
        type: string
      desktopEnabled:
        type: boolean
      desktopInApp:
        type: boolean
      enabled:
        type: boolean
  AppUpdate:
    type: object
    properties:
      id:
        type: "string"
      key:
        type: "string"
      appliedOn:
        type: "string"
  BetReceiptBanner:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      sortOrder:
        type: "number"
      validityPeriodEnd:
        type: "string"
      validityPeriodStart:
        type: "string"
      name:
        type: "string"
      disabled:
        type: "boolean"
      brand:
        type: "string"
      description:
        type: "string"
      filename:
        $ref: '#/definitions/Filename'
      uriMedium:
        type: "string"
      uriOriginal:
        type: "string"
      fileUrl:
        type: "string"
      useUrl:
        type: "boolean"
      directUrl:
        type: "string"
      useDirectUrl:
        type: "boolean"
      directFileUrl:
        type: "string"
      useDirectFileUrl:
        type: "boolean"
  BetReceiptBannerTablet:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      sortOrder:
        type: "number"
      validityPeriodEnd:
        type: "string"
      validityPeriodStart:
        type: "string"
      name:
        type: "string"
      disabled:
        type: "boolean"
      brand:
        type: "string"
      description:
        type: "string"
      filename:
        $ref: '#/definitions/Filename'
      uriMedium:
        type: "string"
      uriOriginal:
        type: "string"
  BottomMenu:
    type: object
    properties:
      id:
        type: "string"
      brand:
        type: "string"
      createdAt:
        type: "string"
      createdBy:
        type: "string"
      disabled:
        type: "boolean"
      inApp:
        type: "boolean"
      lang:
        type: "string"
      linkTitle:
        type: "string"
      linkTitleBrand:
        type: "string"
      sortOrder:
        type: "number"
      targetUri:
        type: "string"
      updatedAt:
        type: "string"
      updatedBy:
        type: "string"
      section:
        type: "string"
      authRequired:
        type: "boolean"
      systemID:
        type: "number"
  Brand:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      key:
        type: "string"
      sortOrder:
        type: "number"
      brandCode:
        type: "string"
      title:
        type: "string"
      disabled:
        type: "boolean"
      akamaiUrl:
        type: "string"
      akamaiPath:
        type: "string"
  Config:
    type: object
    properties:
      id:
        type: "string"
      brand:
        type: "string"
      config:
        type: object
  ConnectMenu:
    type: object
    properties:
      id:
        type: "string"
      updatedAt:
        type: "string"
      createdAt:
        type: "string"
      linkTitleBrand:
        type: "string"
      sortOrder:
        type: "number"
      linkTitle:
        type: "string"
      level:
        type: "string"
      lang:
        type: "string"
      brand:
        type: "string"
      showItemFor:
        type: "string"
      svg:
        type: "string"
      svgId:
        type: "string"
      inApp:
        type: "boolean"
      disabled:
        type: "boolean"
      targetUri:
        type: "string"
      svgFilename:
        $ref: '#/definitions/SvgFilename'
      updatedBy:
        type: "string"
  Country:
    type: object
    properties:
      id:
        type: "string"
      countriesData:
        type: "array"
        items:
          type: "object"
          properties:
            val:
              type: "string"
            phoneAreaCode:
              type: "string"
            label:
              type: "string"
            allowed:
              type: "boolean"
  Dashboard:
    type: object
    properties:
      id:
        type: "string"
      updatedAt:
        type: "string"
      createdAt:
        type: "string"
      estimatedTime:
        type: "string"
      status:
        type: "string"
      purgeID:
        type: "string"
      progressURI:
        type: "string"
      supportID:
        type: "string"
      type:
        type: "string"
      domains:
        type: "string"
      currentTime:
        type: "string"
  EdpMarket:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      sortOrder:
        type: "number"
      name:
        type: "string"
      lang:
        type: "string"
      brand:
        type: "string"
      lastItem:
        type: "boolean"
  FeaturedEventsType:
    type: object
    properties:
      id:
        type: "string"
      rowsNum:
        type: "number"
      typeId:
        type: "number"
      name:
        type: "string"
      collapsed:
        type: "boolean"
      disabled:
        type: "boolean"
      validityPeriodEnd:
        type: "string"
      validityPeriodStart:
        type: "string"
      sportCategories:
        type: "string"
      brand:
        type: "string"
      lang:
        type: "string"
  Feature:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      title_brand:
        type: "string"
      sortOrder:
        type: "number"
      heightMedium:
        type: "number"
      widthMedium:
        type: "number"
      uriMedium:
        type: "string"
      validityPeriodEnd:
        type: "string"
      validityPeriodStart:
        type: "string"
      shortDescription:
        type: "string"
      title:
        type: "string"
      vipLevels:
        type: "array"
        items:
          type: object
      lang:
        type: "string"
      brand:
        type: "string"
      showToCustomer:
        type: "string"
      disabled:
        type: "boolean"
      description:
        type: "string"
      filename:
        $ref: '#/definitions/Filename'
  Football3DBanner:
  type: object
  properties:
    id:
      type: "string"
    updatedBy:
      type: "string"
    updatedAt:
      type: "string"
    createdBy:
      type: "string"
    createdAt:
      type: "string"
    sortOrder:
      type: "number"
    validityPeriodEnd:
      type: "string"
    validityPeriodStart:
      type: "string"
    description:
      type: "string"
    targetUri:
      type: "string"
    name:
      type: "string"
    displayDuration:
      type: "number"
    disabled:
      type: "boolean"
    brand:
      type: "string"
    filename:
      $ref: '#/definitions/Filename'
    uriMedium:
      type: "string"
    uriOriginal:
      type: "string"
  FooterLogo:
    type: object
    properties:
      id:
        type: "string"
      sortOrder:
        type: "number"
      title:
        type: "string"
      target:
        type: "string"
      disabled:
        type: "boolean"
      lang:
        type: "string"
      brand:
        type: "string"
      svg:
        type: "string"
      svgId:
        type: "string"
      svgFilename:
         $ref: '#/definitions/SvgFilename'
      filename:
         $ref: '#/definitions/Filename'
      uriMedium:
        type: "string"
      uriOriginal:
        type: "string"
  FooterMenu:
    type: object
    properties:
      id:
        type: "string"
      brand:
        type: "string"
      desktop:
        type: "boolean"
      disabled:
        type: "boolean"
      filename:
        $ref: '#/definitions/SvgFilename'
      heightMedium:
        type: "number"
      heightSmall:
        type: "number"
      imageTitle:
        type: "string"
      imageTitle_brand:
        type: "string"
      inApp:
        type: "boolean"
      lang:
        type: "string"
      linkTitle:
        type: "string"
      linkTitle_brand:
        type: "string"
      mobile:
        type: "boolean"
      path:
        type: "string"
      showItemFor:
        type: "string"
      sortOrder:
        type: "number"
      spriteClass:
        type: "string"
      svg:
        type: "string"
      svgFilename:
        $ref: '#/definitions/SvgFilename'
      svgId:
        type: "string"
      tablet:
        type: "boolean"
      targetUri:
        type: "string"
      updatedAt:
        type: "string"
      updatedBy:
        type: "string"
      uriMedium:
        type: "string"
      uriSmall:
        type: "string"
      widthMedium:
        type: "number"
      widthSmall:
        type: "number"
      collectionType:
        type: "string"
      itemType:
        type: "string"
      heightLarge:
        type: "number"
      widthLarge:
        type: "number"
      uriLarge:
        type: "string"
      authRequired:
        type: "boolean"
      systemID:
        type: "number"
  Gallery:
    type: object
    properties:
      id:
        type: "string"
      key:
        type: "string"
      name:
        type: "string"
      images:
        type: "array"
        items:
          $ref: '#/definitions/Filename'
      publishedDate:
        type: "string"
  HeaderMenu:
    type: object
    properties:
      id:
        type: "string"
      brand:
        type: "string"
      createdAt:
        type: "string"
      createdBy:
        type: "string"
      disabled:
        type: "boolean"
      lang:
        type: "string"
      level:
        type: "string"
      linkTitle:
        type: "string"
      linkTitle_brand:
        type: "string"
      sortOrder:
        type: "number"
      targetUri:
        type: "string"
      updatedAt:
        type: "string"
      updatedBy:
        type: "string"
      parent:
        type: "string"
      inApp:
        type: "boolean"
  HomeModule:
    type: object
    properties:
      id:
        type: "string"
      title:
        type: "string"
      displayOrder:
        type: "number"
      showExpanded:
        type: "boolean"
      navItem:
        type: "string"
      maxRows:
        type: "number"
      data:
        type: "array"
        items:
          type: "object"
          properties:
            nameOverride:
              type: "string"
            id:
              type: "string"
            name:
              type: "string"
            outright:
              type: "boolean"
            marketCount:
              type: "string"
      dataSelection:
        required:
          - "selectionType"
          - "selectionId"
        properties:
          selectionType:
            type: "string"
          selectionId:
            type: "string"
        type: "object"
      footerLink:
        required:
          - "text"
          - "url"
        properties:
          text:
            type: "string"
          url:
            type: "string"
        type: "object"
      publishToChannels:
        type: "array"
        items:
          type: "string"
      visibility:
        properties:
          enabled:
            type: "boolean"
          displayFrom:
            type: "string"
          displayTo:
            type: "string"
        type: "object"
      totalEvents:
        type: "number"
      eventsSelectionSettings:
        properties:
          from:
            type: "string"
          to:
            type: "string"
        type: "object"
      publishedDevices:
        properties:
          rcomb:
            properties:
              desktop:
                type: "boolean"
              tablet:
                type: "boolean"
              mobile:
                type: "boolean"
            type: "object"
          connect:
            properties:
              desktop:
                type: "boolean"
              tablet:
                type: "boolean"
              mobile:
                type: "boolean"
            type: "object"
          retail:
            properties:
              desktop:
                type: "boolean"
              tablet:
                type: "boolean"
              mobile:
                type: "boolean"
            type: "object"
          partner:
            properties:
              desktop:
                type: "boolean"
              tablet:
                type: "boolean"
              mobile:
                type: "boolean"
            type: "object"
          secondscreen:
            properties:
              desktop:
                type: "boolean"
              tablet:
                type: "boolean"
              mobile:
                type: "boolean"
            type: "object"
          gf:
            properties:
              desktop:
                type: "boolean"
              tablet:
                type: "boolean"
              mobile:
                type: "boolean"
            type: "object"
          bma:
            properties:
              desktop:
                type: "boolean"
              tablet:
                type: "boolean"
              mobile:
                type: "boolean"
            type: "object"
        type: "object"
      maxSelections:
        type: "number"
      showEventsForDays:
        type: "number"
  HRQuickLink:
    type: object
    properties:
      id:
        type: "string"
      body:
        type: "string"
      brand:
        type: "string"
      disabled:
        type: "boolean"
      filename:
        $ref: '#/definitions/Filename'
      heightMedium:
        type: "number"
      lang:
        type: "string"
      linkType:
        type: "string"
      raceType:
        type: "string"
      sortOrder:
        type: "number"
      target:
        type: "string"
      title:
        type: "string"
      uriMedium:
        type: "string"
      validityPeriodEnd:
        type: "string"
      validityPeriodStart:
        type: "string"
      widthMedium:
        type: "number"
  League:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      sortOrder:
        type: "number"
      redirectionUrl:
        type: "string"
      leagueUrl:
        type: "string"
      betBuilderUrl:
        type: "string"
      banner:
        type: "string"
      name:
        type: "string"
      lang:
        type: "string"
      brand:
        type: "string"
      categoryId:
        type: "number"
      typeId:
        type: "number"
      ssCategoryCode:
        type: "string"
      tabletBanner:
        type: "string"
  LeftMenu:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      linkTitleBrand:
        type: "string"
      sortOrder:
        type: "number"
      linkTitle:
        type: "string"
      level:
        type: "string"
      lang:
        type: "string"
      brand:
        type: "string"
      showItemFor:
        type: "string"
      svg:
        type: "string"
      svgId:
        type: "string"
      inApp:
        type: "boolean"
      disabled:
        type: "boolean"
      targetUri:
        type: "string"
      svgFilename:
        $ref: '#/definitions/SvgFilename'
  LNQuickLink:
    type: object
    properties:
      id:
        type: "string"
      brand:
        type: "string"
      collectionType:
        type: "string"
      disabled:
        type: "boolean"
      filename:
        $ref: '#/definitions/SvgFilename'
      heightMedium:
        type: "number"
      heightSmall:
        type: "number"
      lang:
        type: "string"
      sortOrder:
        type: "number"
      spriteClass:
        type: "string"
      target:
        type: "string"
      title:
        type: "string"
      uriMedium:
        type: "string"
      uriSmall:
        type: "string"
      widthMedium:
        type: "number"
      widthSmall:
        type: "number"
  MaintenancePage:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      validityPeriodEnd:
        type: "string"
      validityPeriodStart:
        type: "string"
      name:
        type: "string"
      desktop:
        type: "boolean"
      tablet:
        type: "boolean"
      mobile:
        type: "boolean"
      targetUri:
        type: "string"
      brand:
        type: "string"
      filename:
        $ref: '#/definitions/Filename'
      uriMedium:
        type: "string"
      uriOriginal:
        type: "string"
  ModuleRibbonTab:
    type: object
    properties:
      id:
        type: "string"
      brand:
        type: "string"
      directiveName:
        type: "string"
      key:
        type: "string"
      lang:
        type: "string"
      sortOrder:
        type: "number"
      targetUri:
        type: "string"
      title:
        type: "string"
      title_brand:
        type: "string"
      updatedAt:
        type: "string"
      updatedBy:
        type: "string"
      visible:
        type: "boolean"
      showTabOn:
        type: "string"
      ID:
        type: "string"
      devices:
        required:
          - "android"
          - "ios"
          - "wp"
        properties:
          android:
            type: "boolean"
          ios:
            type: "boolean"
          wp:
            type: "boolean"
        type: "object"
      url:
        type: "string"
  OfferModule:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      sortOrder:
        type: "number"
      name:
        type: "string"
      brand:
        type: "string"
      disabled:
        type: "boolean"
      showModuleOn:
        type: "string"
  Offer:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      sortOrder:
        type: "number"
      module:
        type: "string"
      vipLevelsInput:
        type: "string"
      targetUri:
        type: "string"
      displayTo:
        type: "string"
      displayFrom:
        type: "string"
      name:
        type: "string"
      vipLevels:
        type: "array"
        items:
          type: object
      brand:
        type: "string"
      disabled:
        type: "boolean"
      showOfferTo:
        type: "string"
      showOfferOn:
        type: "string"
      useDirectImageUrl:
        type: "boolean"
      directImageUrl:
        type: "string"
      image:
        $ref: '#/definitions/Filename'
      imageUri:
        type: "string"
  Post:
    type: object
    properties:
      id:
        type: "string"
      slug:
        type: "string"
      title:
        type: "string"
      categories:
        type: "array"
        items:
          type: "object"
      state:
        type: "string"
  Promotion:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      title_brand:
        type: "string"
      sortOrder:
        type: "number"
      heightMedium:
        type: "number"
      widthMedium:
        type: "number"
      uriMedium:
        type: "string"
      htmlMarkup:
        type: "string"
      requestId:
        type: "string"
      vipLevelsInput:
        type: "string"
      validityPeriodEnd:
        type: "string"
      validityPeriodStart:
        type: "string"
      shortDescription:
        type: "string"
      promoKey:
        type: "string"
      title:
        type: "string"
      vipLevels:
        type: "array"
        items:
          type: "undefined"
      lang:
        type: "string"
      brand:
        type: "string"
      categoryId:
        type: "array"
        items:
          type: "string"
      showToCustomer:
        type: "string"
      disabled:
        type: "boolean"
      description:
        type: "string"
      filename:
        $ref: '#/definitions/Filename'
  QuickLink:
    type: object
    properties:
      id:
        type: "string"
      sortOrder:
        type: "number"
      validityPeriodEnd:
        type: "string"
      validityPeriodStart:
        type: "string"
      target:
        type: "string"
      body:
        type: "string"
      title:
        type: "string"
      disabled:
        type: "boolean"
      lang:
        type: "string"
      brand:
        type: "string"
      linkType:
        type: "string"
      raceType:
        type: "string"
      filename:
        $ref: '#/definitions/Filename'
      uriMedium:
        type: "string"
  RightMenu:
    type: object
    properties:
      id:
        type: "string"
      brand:
        type: "string"
      collectionType:
        type: "string"
      createdAt:
        type: "string"
      createdBy:
        type: "string"
      disabled:
        type: "boolean"
      filename:
        $ref: '#/definitions/SvgFilename'
      heightMedium:
        type: "number"
      heightSmall:
        type: "number"
      iconAligment:
        type: "string"
      inApp:
        type: "boolean"
      lang:
        type: "string"
      linkTitle:
        type: "string"
      linkTitle_brand:
        type: "string"
      menuItemView:
        type: "string"
      path:
        type: "string"
      section:
        type: "string"
      showItemFor:
        type: "string"
      sortOrder:
        type: "number"
      spriteClass:
        type: "string"
      targetUri:
        type: "string"
      type:
        type: "string"
      updatedAt:
        type: "string"
      updatedBy:
        type: "string"
      uriMedium:
        type: "string"
      uriSmall:
        type: "string"
      widthMedium:
        type: "number"
      widthSmall:
        type: "number"
      showOnlyOnIOS:
        type: "boolean"
      showOnlyOnAndroid:
        type: "boolean"
      heightLarge:
        type: "number"
      widthLarge:
        type: "number"
      svg:
        type: "string"
      svgFilename:
        $ref: '#/definitions/Filename'
      svgId:
        type: "string"
      qa:
        type: "string"
      uriLarge:
        type: "string"
      authRequired:
        type: "boolean"
      systemID:
        type: "number"
  SeoPage:
    type: object
    properties:
      id:
        type: "string"
      brand:
        type: "string"
      changefreq:
        type: "string"
      createdAt:
        type: "string"
      createdBy:
        type: "string"
      description:
        type: "string"
      disabled:
        type: "boolean"
      lang:
        type: "string"
      staticBlock:
        type: "string"
      title:
        type: "string"
      updatedAt:
        type: "string"
      updatedBy:
        type: "string"
      url:
        type: "string"
      urlBrand:
        type: "string"
      priority:
        type: "string"
  SportCategory:
    type: object
    properties:
      _id:
        type: "string"
      alt:
        type: "string"
      brand:
        type: "string"
      categoryId:
        type: "number"
      disabled:
        type: "boolean"
      filename:
        $ref: '#/definitions/SvgFilename'
      heightMedium:
        type: "number"
      heightMediumIcon:
        type: "number"
      heightSmall:
        type: "number"
      heightSmallIcon:
        type: "number"
      icon:
        $ref: '#/definitions/SvgFilename'
      imageTitle:
        type: "string"
      inApp:
        type: "boolean"
      isTopSport:
        type: "boolean"
      key:
        type: "string"
      lang:
        type: "string"
      link:
        type: "string"
      path:
        type: "string"
      showInMenu:
        type: "boolean"
      sortOrder:
        type: "number"
      spriteClass:
        type: "string"
      ssCategoryCode:
        type: "string"
      svg:
        type: "string"
      svgFilename:
        $ref: '#/definitions/SvgFilename'
      svgId:
        type: "string"
      targetUri:
        type: "string"
      updatedAt:
        type: "string"
      updatedBy:
        type: "string"
      uriMedium:
        type: "string"
      uriMediumIcon:
        type: "string"
      uriSmall:
        type: "string"
      uriSmallIcon:
        type: "string"
      widthMedium:
        type: "number"
      widthMediumIcon:
        type: "number"
      widthSmall:
        type: "number"
      widthSmallIcon:
        type: "number"
      collectionType:
        type: "string"
      showInAZ:
        type: "boolean"
      showInHome:
        type: "boolean"
      showInPlay:
        type: "boolean"
      heightLarge:
        type: "number"
      heightLargeIcon:
        type: "number"
      uriLarge:
        type: "string"
      widthLarge:
        type: "number"
      widthLargeIcon:
        type: "number"
      scoreBoardUrl:
        type: "string"
  Sport:
    type: object
    properties:
      id:
        type: "string"
      alt:
        type: "string"
      brand:
        type: "string"
      categoryId:
        type: "number"
      collectionType:
        type: "string"
      createdAt:
        type: "string"
      createdBy:
        type: "string"
      disabled:
        type: "boolean"
      dispSortName:
        type: "string"
      filename:
        $ref: '#/definitions/SvgFilename'
      heightMedium:
        type: "number"
      heightMediumIcon:
        type: "number"
      heightSmall:
        type: "number"
      heightSmallIcon:
        type: "number"
      imageTitle:
        type: "string"
      inApp:
        type: "boolean"
      isOutrightSport:
        type: "boolean"
      lang:
        type: "string"
      outcomesTemplateType1:
        type: "string"
      outcomesTemplateType2:
        type: "string"
      outcomesTemplateType3:
        type: "string"
      primaryMarkets:
        type: "string"
      showInPlay:
        type: "boolean"
      sortOrder:
        type: "number"
      spriteClass:
        type: "string"
      ssCategoryCode:
        type: "string"
      svg:
        type: "string"
      svgFilename:
        $ref: '#/definitions/SvgFilename'
      svgId:
        type: "string"
      tabCompetitions:
        properties:
          tablabel:
            type: "string"
          visible:
            type: "boolean"
        type: "object"
      tabCoupons:
        properties:
          tablabel:
            type: "string"
          visible:
            type: "boolean"
        type: "object"
      tabJackpot:
        properties:
          tablabel:
            type: "string"
          visible:
            type: "boolean"
        type: "object"
      tabLive:
        properties:
          tablabel:
            type: "string"
          visible:
            type: "boolean"
        type: "object"
      tabMatches:
        properties:
          tablabel:
            type: "string"
          visible:
            type: "boolean"
        type: "object"
      tabOutrights:
        properties:
          tablabel:
            type: "string"
          visible:
            type: "boolean"
        type: "object"
      tabSpecials:
        properties:
          tablabel:
            type: "string"
          visible:
            type: "boolean"
        type: "object"
      targetUri:
        type: "string"
      typeIds:
        type: "string"
      updatedAt:
        type: "string"
      updatedBy:
        type: "string"
      uriMedium:
        type: "string"
      uriSmall:
        type: "string"
      viewByFilters:
        type: "string"
      widthMedium:
        type: "number"
      widthMediumIcon:
        type: "number"
      widthSmall:
        type: "number"
      widthSmallIcon:
        type: "number"
      defaultTab:
        type: "string"
      heightLarge:
        type: "number"
      heightLargeIcon:
        type: "number"
      uriLarge:
        type: "string"
      widthLarge:
        type: "number"
      widthLargeIcon:
        type: "number"
  SsoPage:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      title_brand:
        type: "string"
      sortOrder:
        type: "number"
      targetIOS:
        type: "string"
      title:
        type: "string"
      showOnIOS:
        type: "boolean"
      showOnAndroid:
        type: "boolean"
      disabled:
        type: "boolean"
      brand:
        type: "string"
      filename:
        $ref: '#/definitions/Filename'
      heightMedium:
        type: "number"
      uriMedium:
        type: "string"
      uriOriginal:
        type: "string"
      widthMedium:
        type: "number"
      openLink:
        type: "string"
  StaticBlock:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      title_brand:
        type: "string"
      uri:
        type: "string"
      title:
        type: "string"
      lang:
        type: "string"
      brand:
        type: "string"
      enabled:
        type: "boolean"
      htmlMarkup:
        type: "string"
  Structure:
    type: object
    properties:
      id:
        type: "string"
      lang:
        type: "string"
      brand:
        type: "string"
      structure:
        properties: {}
        type: "object"
  TopGame:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      sortOrder:
        type: "number"
      widthMediumIcon:
        type: "number"
      heightMediumIcon:
        type: "number"
      widthSmallIcon:
        type: "number"
      heightSmallIcon:
        type: "number"
      widthMedium:
        type: "number"
      heightMedium:
        type: "number"
      widthSmall:
        type: "number"
      heightSmall:
        type: "number"
      spriteClass:
        type: "string"
      imageTitle:
        type: "string"
      lang:
        type: "string"
      brand:
        type: "string"
      collectionType:
        type: "string"
      disabled:
        type: "boolean"
      path:
        type: "string"
      alt:
        type: "string"
      targetUri:
        type: "string"
      filename:
        $ref: '#/definitions/SvgFilename'
      icon:
        $ref: '#/definitions/SvgFilename'
      uriMedium:
        type: "string"
      uriMediumIcon:
        type: "string"
      uriSmall:
        type: "string"
      uriSmallIcon:
        type: "string"
      heightLarge:
        type: "number"
      heightLargeIcon:
        type: "number"
      widthLarge:
        type: "number"
      widthLargeIcon:
        type: "number"
      uriLargeIcon:
        type: "string"
      uriLarge:
        type: "string"
  TopMenu:
    type: object
    properties:
      id:
        type: "string"
      key:
        type: "string"
      targetUri:
        type: "string"
      linkTitle:
        type: "string"
      disabled:
        type: "boolean"
      sortOrder:
        type: "number"
      brand:
        type: "string"
      lang:
        type: "string"
  UserMenu:
    type: object
    properties:
      id:
        type: "string"
      activeIfLogout:
        type: "boolean"
      brand:
        type: "string"
      disabled:
        type: "boolean"
      filename:
        $ref: '#/definitions/SvgFilename'
      heightMedium:
        type: "number"
      heightSmall:
        type: "number"
      lang:
        type: "string"
      linkTitle:
        type: "string"
      linkTitle_brand:
        type: "string"
      path:
        type: "string"
      sortOrder:
        type: "number"
      spriteClass:
        type: "string"
      targetUri:
        type: "string"
      updatedAt:
        type: "string"
      uriMedium:
        type: "string"
      uriSmall:
        type: "string"
      widthMedium:
        type: "number"
      widthSmall:
        type: "number"
      collectionType:
        type: "string"
      heightLarge:
        type: "number"
      showUserMenu:
        type: "string"
      svg:
        type: "string"
      svgFilename:
        $ref: '#/definitions/SvgFilename'
      svgId:
        type: "string"
      updatedBy:
        type: "string"
      uriLarge:
        type: "string"
      widthLarge:
        type: "number"
      qa:
        type: "string"
  Widget:
    type: object
    properties:
      id:
        type: "string"
      brand:
        type: "string"
      columns:
        type: "string"
      createdAt:
        type: "string"
      disabled:
        type: "boolean"
      showExpanded:
        type: "boolean"
      showOnDesktop:
        type: "boolean"
      showOnMobile:
        type: "boolean"
      showOnTablet:
        type: "boolean"
      sortOrder:
        type: "number"
      title:
        type: "string"
      type:
        type: "string"
      type_brand:
        type: "string"
      updatedAt:
        type: "string"
      updatedBy:
        type: "string"
      showFirstEvent:
        type: "boolean"
      showOn:
        properties:
          sports:
            type: "array"
            items:
              type: "undefined"
        type: "object"
  YourCallLeague:
    type: object
    properties:
      id:
        type: "string"
      updatedAt:
        type: "string"
      createdAt:
        type: "string"
      sortOrder:
        type: "number"
      name:
        type: "string"
      lang:
        type: "string"
      brand:
        type: "string"
      enabled:
        type: "boolean"
      typeId:
        type: "number"
      updatedBy:
        type: "string"
  YourCallMarket:
    type: object
    properties:
      id:
        type: "string"
      updatedAt:
        type: "string"
      createdAt:
        type: "string"
      sortOrder:
        type: "number"
      name:
        type: "string"
      lang:
        type: "string"
      brand:
        type: "string"
      dsMarket:
        type: "string"
      updatedBy:
        type: "string"
  YourCallStaticBlock:
    type: object
    properties:
      id:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
      createdBy:
        type: "string"
      createdAt:
        type: "string"
      title_brand:
        type: "string"
      title:
        type: "string"
      lang:
        type: "string"
      brand:
        type: "string"
      enabled:
        type: "boolean"
      htmlMarkup:
        type: "string"